#!/usr/bin/env ruby
# encoding: UTF-8

require 'shellwords'
require 'csv'

def main
  loop do
    $stdout.print ENV['PROMPT']
    line = $stdin.gets

    if line
      line.strip!
    else
      exit
    end

    commands = split_on_pipes(line)

    p_in  = $stdin
    p_out = $stdout
    pipe  = []

    commands.each_with_index do |command, index|
      prog, *args = Shellwords.shellsplit(command)

      if builtin? prog
        call_builtin prog, *args
      else
        unless command == commands.last
          pipe  = IO.pipe
          p_out = pipe.last
        else
          p_out = $stdout
        end

        spawn_program prog, *args, p_out, p_in

        p_out.close unless p_out == $stdout
        p_in.close  unless p_in  == $stdin
        p_in = pipe.first
      end
    end

    Process.waitall

  end
end

def split_on_pipes line
  CSV.parse(line, :col_sep => '|').flatten
end

def builtin? command
  BUILTINS.has_key? command
end

def call_builtin command, *args
  BUILTINS[command].call(*args)
end

def spawn_program prog, *args, io_out, io_in
  fork { 
    unless io_out == $stdout
      $stdout.reopen(io_out)
      io_out.close
    end

    unless io_in == $stdin
      $stdin.reopen(io_in)
      io_in.close
    end

    exec prog, *args
  }
end

BUILTINS = {
  'cd'   => lambda {|dir = ENV["HOME"]| Dir.chdir(File.expand_path dir) },
  'exit' => lambda {|code = 0| exit(code.to_i) },
  'exec' => lambda {|*command| exec *command },
  'set'  => lambda {|args| key, value = args.split('='); ENV[key] = value}
}

ENV['PROMPT'] = '~> '

if $0 == __FILE__
  main
end
